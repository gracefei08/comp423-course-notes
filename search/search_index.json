{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Grace's Course Notes","text":"<p>This is my home page. I will use it to organize and share my course notes.</p>"},{"location":"tutorials/go-setup/","title":"Setting up a dev container for Go","text":"<p>Primary author: Grace Fei</p>"},{"location":"tutorials/go-setup/#prerequisites","title":"Prerequisites","text":"<p>Before starting, ensure you have the following tools installed on your machine:</p> <ul> <li>Docker</li> <li>Visual Studio Code</li> <li>Remote - Containers extension for VS Code</li> <li>Git</li> </ul>"},{"location":"tutorials/go-setup/#instructions","title":"Instructions","text":""},{"location":"tutorials/go-setup/#step-1-start-with-a-blank-directory","title":"Step 1: Start with a Blank Directory","text":"<p>1) Create a new directory for your project:</p> <pre><code>mkdir go-dev-container\ncd go-dev-container\n</code></pre> <p>2) Initialize a Git repository:</p> <pre><code>git init\n</code></pre>"},{"location":"tutorials/go-setup/#step-2-create-the-dev-container-configuration-files","title":"Step 2: Create the Dev Container Configuration Files","text":"<p>1) Inside the project directory, create a .devcontainer folder:</p> <pre><code>mkdir .devcontainer\n</code></pre> <p>2) Inside .devcontainer, create a devcontainer.json file:</p> <pre><code>touch .devcontainer/devcontainer.json\n</code></pre> <p>3) Populate devcontainer.json with the following configuration:</p> <pre><code>{\n  \"name\": \"Go Dev Container\",\n  \"image\": \"golang:1.20\",\n  \"features\": {},\n  \"customizations\": {\n    \"vscode\": {\n      \"settings\": {\n        \"go.formatTool\": \"gofmt\",\n        \"editor.formatOnSave\": true\n      },\n      \"extensions\": [\"golang.Go\"]\n    }\n  },\n  \"postCreateCommand\": \"go mod init go-dev-container\"\n}\n</code></pre> <p>Explanation of devcontainer.json</p> <ul> <li>name: Specifies the name of your Dev Container.</li> <li>image: Uses the official Go Docker image with version 1.20.</li> <li>features: Placeholder for additional Dev Container features.</li> <li>customizations.vscode.extensions: Automatically installs the Go extension for VS Code.</li> <li>postCreateCommand: Runs a command after the container is created to initialize a Go module.</li> </ul>"},{"location":"tutorials/go-setup/#step-3-open-the-project-in-the-dev-container","title":"Step 3: Open the Project in the Dev Container","text":"<p>1) Open your project in VS Code.</p> <p>2) Use the Remote-Containers: Open Folder in Container command from the Command Palette (Ctrl+Shift+P or Cmd+Shift+P).</p> <p>3) Select your project folder.</p> <p>4) VS Code will build and open the Dev Container.</p>"},{"location":"tutorials/go-setup/#step-4-write-the-hello-comp423-program","title":"Step 4: Write the \"Hello COMP423\" Program","text":"<p>1) Create a new file named main.go in the project directory:</p> <pre><code>touch main.go\n</code></pre> <p>2) Add the following Go code to main.go:</p> <pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(\"Hello COMP423\")\n}  \n</code></pre>"},{"location":"tutorials/go-setup/#step-5-build-and-run-the-program","title":"Step 5: Build and Run the Program","text":"<p>1) Build the program using the build subcommand:</p> <pre><code>go build -o hello_comp423\n</code></pre> <p>This creates a binary file named hello_comp423 in your project directory. The build subcommand compiles the code but does not execute it immediately, similar to the gcc command used in COMP211 for compiling C programs.</p> <p>2) Run the compiled binary:</p> <pre><code>./hello_comp423\n</code></pre> <p>Expected output:</p> <pre><code>Hello COMP423\n</code></pre>"}]}